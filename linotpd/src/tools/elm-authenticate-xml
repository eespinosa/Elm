#!/usr/bin/python
# -*- coding: utf-8 -*-

#	 Elm Authentication System
#	 Copyright (C) 2014 - IT Services, University of Oxford
#	 Author: Richard May (richard.may@balliol.ox.ac.uk)
#

"""
	This script is used by WebAuth to validate one-time passcodes.
    It gets multiple command-line string arguments and responds with a block of XML.
	As of the upcoming WebAuth 4.7.0, this is superseded by the elm-authenticate script.
"""

import sys
import os

from os import path, access, R_OK

import traceback
import getpass
import urllib, httplib2, json
import crypt

from getopt import getopt, GetoptError

import logging

log = logging.getLogger(__name__)

LINOTP_URL = "https://localhost"
DISABLE_SSL_VALIDATION = True


def usage():

    print "Script to contact the LinOTP server and transmit the result back to WebAuth."
    print '''
Syntax: elm-authenticate [mode] [arguments]"

    mode: 'webkdc-userinfo' or 'webkdc-validate'"

    webkdc-userinfo arguments: 
        [username] [ip] [timestamp] [random-multifactor] [url] [factors]
        
    webkdc-validate arguments:
         [username] [ip] [code] [type] [login-state]
    '''

    return

# path: /validate/check, /validate/hastoken, etc.
# params: {"user" : "root", ...}
def call_linotp(path, params):
    # Turn the params dict into a "?user=a&pass=b&..." format
    data = urllib.urlencode(params)
    
    # Get the URL and headers ready.
    url = LINOTP_URL + path
    headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
    
	# Connect with httplib2 (note that not all versions are compiled with disable_ssl_validation)
    try:
        http = httplib2.Http(disable_ssl_certificate_validation = DISABLE_SSL_VALIDATION, timeout = 10)
    except TypeError as exx:
        http = httplib2.Http(timeout = 10)
    
	# POST and get our response
    (_resp, content) = http.request(url, method="POST", body=data, headers=headers)
    
	# Turn the JSON response into a python dict
    rv = json.loads(content)
    return rv.get('result')

def webkdc_userinfo(user):
    reply = '<authdata user="%s"><factors>%s</factors>%s</authdata>'
    factors = "<factor>p</factor>"
    response = call_linotp("/validate/webkdc_userinfo", {"user" : user})
	# Did the call succeed?
    extra = ""
    if (response.get("status")):
        # Call succeeded. Get the results and send them back in the required form.
        tokens = response.get("value") 
        if tokens:
            # If they have a token, require multifactor authentication.
            extra += "<required-factors><factor>m</factor></required-factors>"
            factors += "<factor>m</factor>"
            # Send back the correct available factors
            for tok in tokens.keys():
                typ = tok[:4]
                if typ == "LSSM": # sms
                    factors += "<factor>o2</factor>"
                    extra += "<user-message>%s</user-message>" % tokens[tok]["phone"][-3:]
                elif typ == "GOOG": # authenticator app
                    factors += "<factor>o3</factor>"
                elif typ == "UBCM": # yubikey
                    factors += "<factor>o4</factor>"
            #factors += "<factor>m</factor><factor>o</factor><factor>o1</factor><factor>o2</factor><factor>o3</factor>"
            # We require MFA here rather than in WebAuthRequireInitialFactor because 
            # this seems to be the only way to get MFA-if-token/password-if-not working.

            #extra = "<multifactor-required>yes</multifactor-required>"
        # If they don't have a token, they get nothing.
            
        return reply % (user, factors, extra)
    else:
        print >> sys.stderr, response.get("error")
        sys.exit(1)
        
def webkdc_validate(user, code, token):
    response = call_linotp("/validate/webkdc_validate", {"user" : user, "code" : code})
    reply = '<authdata user="%s"><success>%s</success>%s</authdata>'
    # Did the call succeed?
    value = response.get("value")
    if (value and response.get("status") and value.get("success")):
        # The call succeeded and they authenticated successfully
        factors = "<factor>o</factor><factor>%s</factor>" % token
        data = "<factors>%s<expiration>%d</expiration></factors>" % (factors, value.get("expiration")[0])
        #factor = "<factors><factor>o</factor><factor>o2</factor><factor>o3</factor><expiration>%d</expiration></factors>" % value.get("expiration")[0]
        return reply % (user, "yes", data)
    else:
        # An error occured, so respond with the error info.
        error = "<user-message>%s</user-message>" % value.get("error")
        return reply % (user, "no", error)
        
def sms_send(user):
    _pin = "9999"
    response = call_linotp("/validate/smspin", {"user" : user, "pass" : _pin})
    if response.get("status"):
        return 0
    else:
        print "Error: %s" % value.get("error").get("message")
        return 1

def main():
    """
    main worker:
    * gather the input
    """
    param = {}

    prog = sys.argv[0]

    # No command provided
    if (len(sys.argv) < 2):
        print "Please specify a command."
        usage()
        sys.exit(1)
        
    command = sys.argv[1]
    
    if (command == "webkdc-userinfo"):
        # Did we get enough arguments for this command?
        if (len(sys.argv) < 3):
            print "Not enough arguments!"
            print sys.argv
            usage()
            sys.exit(1)
        
        print webkdc_userinfo(sys.argv[2]) # third arg is username
    elif (command == "webkdc-validate"):
        # Did we get enough arguments for this command?
        if (len(sys.argv) < 5):
            print "Not enough arguments."
            usage()
            sys.exit(1)
        if sys.argv[5] == "o2": # sms
            code = "9999" + str(sys.argv[4])
        else:
            code = sys.argv[4]
        print webkdc_validate(sys.argv[2], code, sys.argv[4]) # third is username, fourth is token type

    elif (command == "sms"):
        if len(sys.argv) < 3:
            print "Not enough arguments."
            usage()
            sys.exit(1)
        sys.exit(sms_send(sys.argv[2]))

    else:
        print "Unrecognized command."
        usage()
        sys.exit(1)

    sys.exit(0)

if __name__ == '__main__':
    ## jump to the main worker
    main()
